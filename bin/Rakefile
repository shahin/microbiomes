require 'logger'
require 'uri'

LOG = Logger.new(STDOUT)

CONF_DIR = ENV['CONF_DIR'] || '../conf'
ANALYSIS_DIR = ENV['ANALYSIS_DIR'] || '../analysis'
DATA_DIRS = {
  'asm' => ENV['DATA_DIR'] ? "#{ENV['DATA_DIR']}/asm" : '../data/asm', 
  'rrna' => ENV['DATA_DIR'] ? "#{ENV['DATA_DIR']}/rrna" : '../data/rrna'
}
FTP_BASE_URLS = {
  'asm' => "ftp://public-ftp.hmpdacc.org/HMASM/PGAs",
  'rrna' => "ftp://public-ftp.hmpdacc.org/HM16STR/by_sample"
}

def build_filename(sequence_type,sample_id)
  if sequence_type == 'asm'
    "#{sample_id}.scaffold.fa"
  elsif sequence_type == 'rrna'
    "#{sample_id}.fa"
  end
end

desc "For each nucleotide sequence in the first sample, find the closest match in the second"
task :compare, [:sequence_type,:site_name,:n_samples] => [:convert] do |t, args|

  sequence_type = args[:sequence_type]
  site_name = args[:site_name]
  n_samples = args[:n_samples].to_i
  blastn_dbs = FileList["#{DATA_DIRS[sequence_type]}/#{site_name}/*.fa.nsq"]

  directory ANALYSIS_DIR

  blastn_dbs.take(n_samples).combination(2).to_a.each do |db_1,db_2|
    sample_1_id = File.basename(db_1).split('.')[0]
    sample_2_id = File.basename(db_2).split('.')[0]
    target = File.join(ANALYSIS_DIR,"align_#{sequence_type}_#{site_name}_#{sample_1_id}_#{sample_2_id}.csv")
    file target => [db_1,db_2]
    Rake::Task[target].invoke
  end
  
end

# find the best alignments for one set of sequences (query) against another set (db)
# alignment result format: align_#{sequence_type}_#{site_name}_#{query_sample}_#{db_sample}.csv
rule( /align_.*\.csv$/ => [
  proc do |taskname| 
    run_params = File.basename(taskname).split(/[_.]/)
    [ File.join(DATA_DIRS[run_params[1]],run_params[2],"#{build_filename(run_params[1],run_params[3])}.nsq"), 
      File.join(DATA_DIRS[run_params[1]],run_params[2],"#{build_filename(run_params[1],run_params[4])}.nsq") ]
  end
]) do |t|
  
  blast_cmd = "blastn -query #{t.sources[0].ext('')} -db #{t.sources[1].ext('')} -evalue 1e-10  -outfmt '10' -max_target_seqs 1 > #{t.name}"
  LOG.info "Running #{blast_cmd}..."
  blast_res = system(blast_cmd)

end

desc "build BLAST databases on the first n_samples for a given sequence_type, site"
task :convert, [:sequence_type,:site_name,:n_samples] => [:download] do |t, args|

  fasta_files = FileList["#{DATA_DIRS[args[:sequence_type]]}/#{args[:site_name]}/*.fa"]
  
  n_samples = args[:n_samples].nil? ? fasta_files.length : args[:n_samples].to_i 

  LOG.info "Making sure we have a BLAST database for each of the first #{n_samples} of #{fasta_files.length} downloaded files ..."
  fasta_files.take(n_samples).each do |file_path|

    target = file_path.ext('fa.nsq')
    file target => file_path
    Rake::Task[target].invoke

  end

end

# build BLAST database from a FASTA file
rule( /\.fa\.nsq$/ => [ 
  proc { |taskname| taskname.sub(/\.fa\.nsq$/,'.fa') } 
]) do |t|

  LOG.info "Building BLAST database for #{t.source} ..."
  blast_path = ENV['BLAST_PATH']
  gen_blast_db_cmd = "#{blast_path}makeblastdb -in #{t.source} -dbtype nucl"
  gen_blast_db_res = `#{gen_blast_db_cmd}`

end

# download and unzip a FASTA file
rule( /\.fa$/ ) do |t|

  target_path, file_name = File.split(t.name)
  base_dir, site_name = File.split(target_path)
  base_dir, sequence_type = File.split(base_dir)

  case sequence_type
  when 'asm'
    decompressor = "bunzip2"
    ftp_url = File.join(FTP_BASE_URLS['asm'],site_name,file_name).ext('.fa.bz2')
    zipped_path = t.name + '.bz2'
  when 'rrna'
    decompressor = "gunzip"
    ftp_url = File.join(FTP_BASE_URLS['rrna'],file_name).ext('.fsa.gz')
    zipped_path = t.name + '.gz'
  else
    raise "Unknown sequence type '#{sequence_type}' requested."
  end

  LOG.info "Downloading #{ftp_url} ..."
  curl_cmd = "curl --progress-bar #{ftp_url} > #{zipped_path}"
  curl_res = system(curl_cmd)
  print "\n"

  unzip_result = `#{decompressor} #{zipped_path}`
  unzipped_path = zipped_path.ext('')

end

desc "download assembly files in FASTA format"
task :download, [:sequence_type,:site_name,:n_samples] do |t, args|

  sequence_type = args[:sequence_type]
  data_dir = DATA_DIRS[sequence_type]

  site_name = args[:site_name]
  site_data_dir = File.join(data_dir,site_name)
  directory site_data_dir

  file_list = get_file_list(sequence_type,site_name)
  n_samples = args[:n_samples].nil? ? file_list.length : args[:n_samples].to_i

  LOG.info "Making sure we have the first #{n_samples} of #{file_list.length} available files ..."

  # get file name, remove compression extension, standardize name
  file_list.take(n_samples).each_with_index do |url,idx|
    file_name = File.basename(URI.parse(url).path)
    target_path = File.join(data_dir,site_name,file_name.ext(''))
    file target_path => site_data_dir
    Rake::Task[target_path].invoke
  end

end

# get the list of assembly files available on the server
def get_file_list(sequence_type,site_name)

  case sequence_type
  when 'asm'
    ftp_url = "#{FTP_BASE_URLS['asm']}/#{site_name}/"

    # get a file list from the FTP directory listing
    LOG.info "Checking file list on FTP server at #{ftp_url} ..."
    curl_res = `curl -l --progress-bar #{ftp_url}`
    print "\n"

    file_list = curl_res.split(/\n/).map { |f| "#{ftp_url}#{f}" }
  when 'rrna'
    require 'csv'
    ftp_url = "#{FTP_BASE_URLS['rrna']}/"

    # parse sample IDs from TSV sample ID map
    # linked from http://hmpdacc.org/micro_analysis/microbiome_analyses.php
    sample_ids_url = "#{CONF_DIR}/ppAll_V35_map.txt"
    file_list = CSV.new(File.open(sample_ids_url), { :headers => :first_row, :col_sep => "\t" })
      .select { |line| line[-3] == site_name.capitalize && line[5] != 'Unavailable' }
      .map { |line| "#{ftp_url}#{line[7]}.fsa.gz" }
      .sort
      .uniq
  else
    raise "Unknown sequence type '#{sequence_type}' requested."
  end

  file_list

end
